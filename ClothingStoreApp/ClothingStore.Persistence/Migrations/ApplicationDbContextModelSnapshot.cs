// <auto-generated />
using System;
using ClothingStore.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClothingStore.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClothingStore.Domain.Entities.AvailableLocationBySize", b =>
                {
                    b.Property<Guid>("AvailableLocationBySizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableLocationBySizeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("VariantId");

                    b.ToTable("AvailableLocations", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Collection")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("Hot")
                        .HasColumnType("bit");

                    b.Property<bool>("LastChance")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoId")
                        .HasName("PK_Photos");

                    b.HasIndex("VariantId");

                    b.ToTable("Photos", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastEdited")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimesEdited")
                        .HasColumnType("int");

                    b.HasKey("ReviewId")
                        .HasName("PK_Reviews");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParentReviewId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Size", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SizeType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("SizeId")
                        .HasName("PK_Sizes");

                    b.ToTable("Sizes", (string)null);

                    b.HasDiscriminator<string>("SizeType").HasValue("Size");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.StockByLocation", b =>
                {
                    b.Property<Guid>("StockByLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationBySizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("StockByLocationId")
                        .HasName("PK_Stock");

                    b.HasIndex("LocationBySizeId");

                    b.ToTable("StocksByLocations", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.HasKey("TagId")
                        .HasName("PK_Tags");

                    b.HasIndex("ItemId");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK_Users");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Variant", b =>
                {
                    b.Property<Guid>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VariantId")
                        .HasName("PK_Variants");

                    b.HasIndex("ItemId");

                    b.ToTable("Variants", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.DressSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("Bust")
                        .HasColumnType("real")
                        .HasColumnName("Dress_Bust");

                    b.Property<float>("Hip")
                        .HasColumnType("real")
                        .HasColumnName("Dress_Hip");

                    b.Property<float>("Waist")
                        .HasColumnType("real")
                        .HasColumnName("Dress_Waist");

                    b.HasDiscriminator().HasValue("Dress");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.HatSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("Circumference")
                        .HasColumnType("real")
                        .HasColumnName("Hat_Circumference");

                    b.HasDiscriminator().HasValue("Hat");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.PantSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("Inseam")
                        .HasColumnType("real")
                        .HasColumnName("Pant_Inseam");

                    b.Property<float>("PantLegCircumference")
                        .HasColumnType("real")
                        .HasColumnName("Pant_PantLegCircumference");

                    b.Property<float>("Waist")
                        .HasColumnType("real")
                        .HasColumnName("Pant_Waist");

                    b.HasDiscriminator().HasValue("Pant");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShirtSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("ChestWidth")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_ChestWidth");

                    b.Property<float>("Length")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_Length");

                    b.Property<float>("NeckCircumference")
                        .HasColumnType("real");

                    b.Property<float>("ShoulderWidth")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_ShoulderWidth");

                    b.Property<float>("SleeveCircumference")
                        .HasColumnType("real");

                    b.Property<float>("SleeveLength")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_SleeveLength");

                    b.HasDiscriminator().HasValue("Shirt");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoeSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float?>("HeelHeight")
                        .HasColumnType("real")
                        .HasColumnName("Shoe_HeelHight");

                    b.Property<float>("Length")
                        .HasColumnType("real")
                        .HasColumnName("Shoe_Length");

                    b.Property<float>("Width")
                        .HasColumnType("real")
                        .HasColumnName("Shoe_Width");

                    b.HasDiscriminator().HasValue("Shoe");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.AvailableLocationBySize", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClothingStore.Domain.Entities.Variant", "Variant")
                        .WithMany("AvailableLocations")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Variants_AvailableLocations");

                    b.Navigation("Size");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClothingStore.Domain.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCartItems_ShoppingCarts");

                    b.Navigation("Item");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Photo", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Variant", "Variant")
                        .WithMany("Gallery")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Variants_Photos");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Review", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Items_Reviews");

                    b.HasOne("ClothingStore.Domain.Entities.Review", "ParentReview")
                        .WithMany("Replies")
                        .HasForeignKey("ParentReviewId");

                    b.Navigation("Item");

                    b.Navigation("ParentReview");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("ClothingStore.Domain.Entities.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_ShoppingCarts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.StockByLocation", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.AvailableLocationBySize", "LocationBySize")
                        .WithMany("AvailableLocationsOfGivenSize")
                        .HasForeignKey("LocationBySizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StockByLocation_AvailableLocations");

                    b.OwnsOne("ClothingStore.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("StockByLocationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Address");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("Longitude");

                            b1.HasKey("StockByLocationId");

                            b1.ToTable("StocksByLocations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("StockByLocationId");
                        });

                    b.Navigation("Location");

                    b.Navigation("LocationBySize");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Tag", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany("Tags")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Items_Tags");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Variant", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany("Variants")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Items_Variants");

                    b.OwnsOne("ClothingStore.Domain.ValueObjects.Color", "Color", b1 =>
                        {
                            b1.Property<Guid>("VariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte>("Blue")
                                .HasColumnType("tinyint")
                                .HasColumnName("ColorBlue");

                            b1.Property<byte>("Green")
                                .HasColumnType("tinyint")
                                .HasColumnName("ColorGreen");

                            b1.Property<string>("Hexadecimal")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ColorHex");

                            b1.Property<byte>("Red")
                                .HasColumnType("tinyint")
                                .HasColumnName("ColorRed");

                            b1.HasKey("VariantId");

                            b1.ToTable("Variants", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("VariantId");
                        });

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.AvailableLocationBySize", b =>
                {
                    b.Navigation("AvailableLocationsOfGivenSize");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Item", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Tags");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Review", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.User", b =>
                {
                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Variant", b =>
                {
                    b.Navigation("AvailableLocations");

                    b.Navigation("Gallery");
                });
#pragma warning restore 612, 618
        }
    }
}
