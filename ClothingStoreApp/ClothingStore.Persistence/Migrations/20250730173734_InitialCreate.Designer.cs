// <auto-generated />
using System;
using ClothingStore.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClothingStore.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250730173734_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClothingStore.Domain.Entities.AvailableLocationBySize", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LocationId");

                    b.HasIndex("SizeId");

                    b.HasIndex("VariantId");

                    b.ToTable("AvailableLocations", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Collection")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Hot")
                        .HasColumnType("bit");

                    b.Property<bool>("LastChance")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoId")
                        .HasName("PK_Photos");

                    b.HasIndex("VariantId");

                    b.ToTable("Photos", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastEdited")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimesEdited")
                        .HasColumnType("int");

                    b.HasKey("ReviewId")
                        .HasName("PK_Reviews");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReviewId1");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Size", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SizeType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("SizeId")
                        .HasName("PK_Sizes");

                    b.ToTable("Sizes", (string)null);

                    b.HasDiscriminator<string>("SizeType").HasValue("Size");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.StockByLocation", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationBySizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("StockId")
                        .HasName("PK_Stock");

                    b.HasIndex("LocationBySizeId");

                    b.ToTable("StocksByLocations", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.HasKey("TagId")
                        .HasName("PK_Tags");

                    b.HasIndex("ItemId");

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = new Guid("f6aaeda0-fef3-4a4e-8f55-9f5191261b7a"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Sweater",
                            Ordinal = 0
                        },
                        new
                        {
                            TagId = new Guid("da98d9fe-62e2-43db-98d7-60e6529bb59c"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Shirt",
                            Ordinal = 1
                        },
                        new
                        {
                            TagId = new Guid("0eaa402d-8656-4aa0-9faa-b390b9cd6ecb"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Dress",
                            Ordinal = 2
                        },
                        new
                        {
                            TagId = new Guid("2d800a18-f6c7-4171-b236-95cb1b82a66b"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Skirt",
                            Ordinal = 3
                        },
                        new
                        {
                            TagId = new Guid("456d936e-5c44-4589-929d-5836ecb64abe"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Poncho",
                            Ordinal = 4
                        },
                        new
                        {
                            TagId = new Guid("0a415d2d-24fa-43af-a491-dc207c5c13bd"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Dress_Shoes",
                            Ordinal = 5
                        },
                        new
                        {
                            TagId = new Guid("58f3f330-f4b7-498f-bdec-9ba1bcca0673"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Sneakers",
                            Ordinal = 6
                        },
                        new
                        {
                            TagId = new Guid("110594f3-7f59-406d-91b0-6143f3cc258b"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Tennis_shoes",
                            Ordinal = 7
                        },
                        new
                        {
                            TagId = new Guid("e1a86080-ed96-4d55-b354-b2022f2713af"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "V_necks",
                            Ordinal = 8
                        },
                        new
                        {
                            TagId = new Guid("ae47258a-791d-4cd0-a71a-ec932d1d82e9"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Dress_Shirt",
                            Ordinal = 9
                        },
                        new
                        {
                            TagId = new Guid("f7b4865c-ffa2-426a-a5df-1b0392aaefba"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Blouse",
                            Ordinal = 10
                        },
                        new
                        {
                            TagId = new Guid("46f7c272-c285-4b93-a058-b6d86de1246d"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Caps",
                            Ordinal = 11
                        },
                        new
                        {
                            TagId = new Guid("63adcb97-a096-4c7b-bf24-03ce1d5547e8"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Hats",
                            Ordinal = 12
                        },
                        new
                        {
                            TagId = new Guid("feace32b-c410-410c-bc0a-df2e3e40453b"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Shorts",
                            Ordinal = 13
                        },
                        new
                        {
                            TagId = new Guid("4c3ca4e4-f273-401b-9420-128ef1d5c516"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Jeans",
                            Ordinal = 14
                        },
                        new
                        {
                            TagId = new Guid("15ce4012-9ed3-4bbe-af24-81ef3f1ccaa3"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Cardigans",
                            Ordinal = 15
                        },
                        new
                        {
                            TagId = new Guid("05cb9e09-af51-4fe0-9964-031ebb88fa14"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Boots",
                            Ordinal = 16
                        },
                        new
                        {
                            TagId = new Guid("1214d400-80d7-400a-a095-e0feefa3f9eb"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Jackets",
                            Ordinal = 17
                        },
                        new
                        {
                            TagId = new Guid("5d145f1d-54eb-42a9-8194-7e986867000c"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Polo_Shirts",
                            Ordinal = 18
                        },
                        new
                        {
                            TagId = new Guid("843873fc-605a-48ae-9139-1edd7a5f7e8f"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Pants",
                            Ordinal = 19
                        },
                        new
                        {
                            TagId = new Guid("1f4a2d98-0cd7-4be1-b70a-99c166bd67b8"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Coats",
                            Ordinal = 20
                        },
                        new
                        {
                            TagId = new Guid("d8fcfa38-cf74-4ab6-a7f1-8ad6de12fb7e"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Blazers",
                            Ordinal = 21
                        },
                        new
                        {
                            TagId = new Guid("22f60eb0-8016-4652-a1be-fa062731ba50"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Overshirts",
                            Ordinal = 22
                        },
                        new
                        {
                            TagId = new Guid("99e2db19-fa0c-4ea8-ab1c-f7cee1dcf6dd"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Hoodies",
                            Ordinal = 23
                        },
                        new
                        {
                            TagId = new Guid("327c812f-d81d-41eb-93e4-f71b0d20c5e5"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Sweatshirt",
                            Ordinal = 24
                        },
                        new
                        {
                            TagId = new Guid("14ffc92b-de97-4fde-bdbc-bb8d71c5a18b"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Colognes",
                            Ordinal = 25
                        },
                        new
                        {
                            TagId = new Guid("35362f06-4cad-413d-b2b5-7b2027a6869b"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Perfumes",
                            Ordinal = 26
                        },
                        new
                        {
                            TagId = new Guid("79ca5945-a5cf-47a6-8626-f78a997861b6"),
                            ItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Accessories",
                            Ordinal = 27
                        });
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK_Users");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Variant", b =>
                {
                    b.Property<Guid>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VariantId")
                        .HasName("PK_Variants");

                    b.HasIndex("ItemId");

                    b.ToTable("Variants", (string)null);
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.DressSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("Bust")
                        .HasColumnType("real")
                        .HasColumnName("Dress_Bust");

                    b.Property<float>("Hip")
                        .HasColumnType("real")
                        .HasColumnName("Dress_Hip");

                    b.Property<float>("Waist")
                        .HasColumnType("real")
                        .HasColumnName("Dress_Waist");

                    b.HasDiscriminator().HasValue("Dress");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.HatSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("Circumference")
                        .HasColumnType("real")
                        .HasColumnName("Hat_Circumference");

                    b.HasDiscriminator().HasValue("Hat");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.PantSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("Inseam")
                        .HasColumnType("real")
                        .HasColumnName("Pant_Inseam");

                    b.Property<float>("PantLegCircumference")
                        .HasColumnType("real")
                        .HasColumnName("Pant_PantLegCircumference");

                    b.Property<float>("Waist")
                        .HasColumnType("real")
                        .HasColumnName("Pant_Waist");

                    b.HasDiscriminator().HasValue("Pant");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShirtSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float>("ChestWidth")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_ChestWidth");

                    b.Property<float>("Length")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_Length");

                    b.Property<float>("NeckCircumference")
                        .HasColumnType("real");

                    b.Property<float>("ShoulderWidth")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_ShoulderWidth");

                    b.Property<float>("SleeveCircumference")
                        .HasColumnType("real");

                    b.Property<float>("SleeveLength")
                        .HasColumnType("real")
                        .HasColumnName("Shirt_SleeveLength");

                    b.HasDiscriminator().HasValue("Shirt");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoeSize", b =>
                {
                    b.HasBaseType("ClothingStore.Domain.Entities.Size");

                    b.Property<float?>("HeelHeight")
                        .HasColumnType("real")
                        .HasColumnName("Shoe_HeelHight");

                    b.Property<float>("Length")
                        .HasColumnType("real")
                        .HasColumnName("Shoe_Length");

                    b.Property<float>("Width")
                        .HasColumnType("real")
                        .HasColumnName("Shoe_Width");

                    b.HasDiscriminator().HasValue("Shoe");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.AvailableLocationBySize", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClothingStore.Domain.Entities.Variant", "Variant")
                        .WithMany("AvailableLocations")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Variants_AvailableLocations");

                    b.Navigation("Size");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClothingStore.Domain.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCartItems_ShoppingCarts");

                    b.Navigation("Item");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Photo", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Variant", "Variant")
                        .WithMany("Gallery")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Variants_Photos");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Review", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Items_Reviews");

                    b.HasOne("ClothingStore.Domain.Entities.Review", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewId1");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("ClothingStore.Domain.Entities.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_ShoppingCarts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.StockByLocation", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.AvailableLocationBySize", "LocationBySize")
                        .WithMany("AvailableLocationsOfGivenSize")
                        .HasForeignKey("LocationBySizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StockByLocation_AvailableLocations");

                    b.OwnsOne("ClothingStore.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("StockByLocationStockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Address");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("Longitude");

                            b1.HasKey("StockByLocationStockId");

                            b1.ToTable("StocksByLocation", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("StockByLocationStockId");
                        });

                    b.Navigation("Location");

                    b.Navigation("LocationBySize");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Tag", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany("Tags")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Items_Tags");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Variant", b =>
                {
                    b.HasOne("ClothingStore.Domain.Entities.Item", "Item")
                        .WithMany("Variants")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Items_Variants");

                    b.OwnsOne("ClothingStore.Domain.ValueObjects.Color", "Color", b1 =>
                        {
                            b1.Property<Guid>("VariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte>("Blue")
                                .HasColumnType("tinyint")
                                .HasColumnName("ColorBlue");

                            b1.Property<byte>("Green")
                                .HasColumnType("tinyint")
                                .HasColumnName("ColorGreen");

                            b1.Property<string>("Hexadecimal")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ColorHex");

                            b1.Property<byte>("Red")
                                .HasColumnType("tinyint")
                                .HasColumnName("ColorRed");

                            b1.HasKey("VariantId");

                            b1.ToTable("Variants", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("VariantId");
                        });

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.AvailableLocationBySize", b =>
                {
                    b.Navigation("AvailableLocationsOfGivenSize");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Item", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Tags");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Review", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.User", b =>
                {
                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("ClothingStore.Domain.Entities.Variant", b =>
                {
                    b.Navigation("AvailableLocations");

                    b.Navigation("Gallery");
                });
#pragma warning restore 612, 618
        }
    }
}
